package com.freshremix.dao;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.freshremix.exception.OptimisticLockException;
import com.freshremix.model.AbstractBaseModel;

/**
 * Base DAO class that provides convenience method for querying, inserting,
 * updating, deleting records.
 * 
 * By convention, the name of the SQL Map xml should be the same as the Entity
 * Name.
 * 
 * You may add new convenience methods as needed.
 * 
 * @author michael
 * 
 * @param <Entity>
 */
public abstract class AbstractBaseDao<Entity extends AbstractBaseModel<PKType>, PKType extends Serializable>
		extends SqlMapClientDaoSupport implements BaseDao<Entity, PKType> {

	
	
	private Class<Entity> persistenceClass;
	private String sqlMapNameSpace;

	public AbstractBaseDao(Class<Entity> persistenceClass) {
		this.persistenceClass = persistenceClass;
		this.sqlMapNameSpace = this.persistenceClass.getSimpleName();
	}

	protected String formStatementName(String statementName) {
		return this.sqlMapNameSpace + "." + statementName;
	}

	/* (non-Javadoc)
	 * @see com.freshremix.dao.BaseDao#save(Entity)
	 */
	@Override
	@SuppressWarnings("unchecked")
	public Entity save(Entity entity) {
		PKType pk = (PKType) getSqlMapClientTemplate().insert(
				formStatementName("save"), entity);
		
		// Need to query the record again so that default fields are properly
		// set in the object
		// IBATIS returns null pk for PK fields that are not autogenerated.
		// Explicitly use the entity pk field to retrieve the record.
		if (pk == null) {
			pk = entity.getPrimaryKey();
		}
		entity = getEntity(pk);
		return entity;
	}

	/* (non-Javadoc)
	 * @see com.freshremix.dao.BaseDao#update(Entity)
	 */
	@Override
	public Entity update(Entity entity) throws OptimisticLockException {
		final int oldVersion = entity.getVersion();
		final int newVersion = oldVersion + 1;

		final Map<String, Object> params = new HashMap<String, Object>();
		params.put("entity", entity);
		params.put("oldVersion", oldVersion);
		params.put("newVersion", newVersion);

		int updateCount = getSqlMapClientTemplate().update(
				formStatementName("update"), params);

		if (updateCount == 0) {
			throw new OptimisticLockException("Optimistic Locking Error for :"
					+ sqlMapNameSpace);
		}

		// Need to query the record again so that default fields are properly
		// set in the object
		entity = getEntity(entity.getPrimaryKey());
		return entity;
	}

	/* (non-Javadoc)
	 * @see com.freshremix.dao.BaseDao#getEntity(PKType)
	 */
	@Override
	@SuppressWarnings("unchecked")
	public Entity getEntity(PKType pk) {
		return (Entity) getSqlMapClientTemplate().queryForObject(
				formStatementName("getByPK"), pk);
	}

	/* (non-Javadoc)
	 * @see com.freshremix.dao.BaseDao#saveOrUpdateEntity(Entity entity)
	 */
	@Override
	public Entity saveOrUpdateEntity(Entity entity) throws OptimisticLockException {
		PKType primaryKey = entity.getPrimaryKey();
		Entity result = null;
		if (primaryKey != null) {
			result = getEntity(primaryKey);
			if (result == null){
				result = save(entity);
			} else {
				result = update(entity);
			}
		} else {
			result = save(entity);
		}
		return result;
	}
	
	/* (non-Javadoc)
	 * @see com.freshremix.dao.BaseDao#deleteAll()
	 */
	@Override
	public int deleteAll() {
		int rowsDeleted = getSqlMapClientTemplate().delete(
				formStatementName("deleteAll"));
		
		return rowsDeleted;
	}

	/*
	 * (non-Javadoc)
	 * @see com.freshremix.dao.BaseDao#delete(java.io.Serializable)
	 */
	@Override
	public void delete(PKType pk) {
		getSqlMapClientTemplate().delete(
				formStatementName("delete"), pk);
	}
	
}
